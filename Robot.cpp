// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Commands/ShifterHigh.h"
#include "Commands/ShifterLow.h"
#include "Commands/DriveNFeet.h"
#include "Commands/DriveUntilXFeet.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Shifter* Robot::shifter = 0;
AirCompressor* Robot::airCompressor = 0;
PickupArms* Robot::pickupArms = 0;
Thrower* Robot::thrower = 0;
PickupWheels* Robot::pickupWheels = 0;
Distance* Robot::distance = 0;
LED* Robot::lED = 0;
Clocksprings* Robot::clocksprings = 0;
Vision* Robot::vision = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
NetworkTable* Robot::netTable = 0;
void Robot::RobotInit() {
	netTable = NetworkTable::GetTable("bbbNetTable");
	netTable->PutNumber("DriveNFeet::PID_P", DRIVENFEET_PID_P);
	netTable->PutNumber("DriveNFeet::PID_I", DRIVENFEET_PID_I);
	netTable->PutNumber("DriveNFeet::PID_D", DRIVENFEET_PID_D);
	netTable->PutNumber("DriveNFeet::PID_Tolerance", DRIVENFEET_PID_TOLERANCE);
	netTable->PutNumber("DriveUntilXFeet::PID_P", DRIVEUNTILXFEET_PID_P);
	netTable->PutNumber("DriveUntilXFeet::PID_I", DRIVEUNTILXFEET_PID_I);
	netTable->PutNumber("DriveUntilXFeet::PID_D", DRIVEUNTILXFEET_PID_D);
	netTable->PutNumber("DriveUntilXFeet::PID_Tolerance", DRIVEUNTILXFEET_PID_TOLERANCE);
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	shifter = new Shifter();
	airCompressor = new AirCompressor();
	pickupArms = new PickupArms();
	thrower = new Thrower();
	pickupWheels = new PickupWheels();
	distance = new Distance();
	lED = new LED();
	clocksprings = new Clocksprings();
	vision = new Vision();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	SmartDashboard::PutData(Scheduler::GetInstance());
	dpadHigh = new InternalButton();
	dpadLow = new InternalButton();
	dpadHigh->WhenPressed(new ShifterHigh());
	dpadLow->WhenPressed(new ShifterLow());
	Robot::clocksprings->ResetJags();
	Robot::pickupWheels->ResetJags();
	Robot::thrower->ResetJags();
}
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
	Robot::lED->ShowTime();

	Robot::driveTrain->SetBrakeMode();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	Robot::driveTrain->SetCoastMode();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	dpadHigh->SetPressed(oi->getDriverJoystick()->GetRawAxis(6)==-1);
	dpadLow->SetPressed(oi->getDriverJoystick()->GetRawAxis(6)==1);
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
