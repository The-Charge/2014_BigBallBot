// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
//
//
#include "Clocksprings.h"
#include "../Robotmap.h"
#include "../Robot.h"
const float MOTOR_SPEED = 1.0;	//speed for tensioner motor
const float ERROR_DEADBAND = .2;	//How close is "close enough"
Clocksprings::Clocksprings() : Subsystem("Clocksprings") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::clockspringsMotor;
	pot = RobotMap::clockspringsPot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Robot::netTable->PutNumber("Clocksprings::errorDeadband", ERROR_DEADBAND);
}
    
void Clocksprings::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Clocksprings::SetDestination(float destination)
{
	_destination = destination;
	float difference = _destination - pot->GetVoltage();
	float sign = difference > 0 ? 1 : -1;
	
	float speed = sign * MOTOR_SPEED;	//So we can adjust it to .8, or .7, or whatever later.
	motor->Set(speed);
}
bool Clocksprings::AtDestination()
{
	float volts = pot->GetAverageVoltage();
	Robot::netTable->PutNumber("Clocksprings::Position", volts);
	SmartDashboard::PutNumber("Clocksprings::Position", volts);
	SmartDashboard::PutNumber("Clocksprings::destination", _destination);
	float difference = volts - _destination;
	difference = difference > 0 ? difference : difference * -1;
	float errorDeadband = Robot::netTable->GetNumber("Clocksprings::errorDeadband",ERROR_DEADBAND);
	return difference < errorDeadband;
}
void Clocksprings::Stop()
{
	motor->Set(0);
}
float Clocksprings::GetPosition()
{
	return pot->GetAverageVoltage();
}
void Clocksprings::ResetJags() {
	motor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	motor->EnableControl();
	//printf("RESET clockspring JAGS \n");
}
