// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
//
//TODO: Calculate actual Distance Per Pulse on BigBallBot and set in RobotBuilder
//TODO: Add command to "Drive to X Feet"
//TODO: Add ability to switch between Coast and Break mode on Drive Train Jags
//TODO: Add check and set to limit speed to Jags to -1 to +1.
//
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/Drive.h"
#include "Math.h"
const float SENSITIVITY = 3;
DriveTrain::DriveTrain() :
	Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rightEncoder = RobotMap::driveTrainRightEncoder;
	frontLeftMotor = RobotMap::driveTrainFrontLeftMotor;
	centerLeftMotor = RobotMap::driveTrainCenterLeftMotor;
	rearLeftMotor = RobotMap::driveTrainRearLeftMotor;
	frontRightMotor = RobotMap::driveTrainFrontRightMotor;
	centerRightMotor = RobotMap::driveTrainCenterRightMotor;
	rearRightMotor = RobotMap::driveTrainRearRightMotor;
	leftEncoder = RobotMap::driveTrainLeftEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Robot::netTable->PutNumber("DriveTrain::Sensitivity", SENSITIVITY); 
}
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
//
//TODO: Change this to work for all joystick drive types
void DriveTrain::Set(float speed) {
	speed = Delinearize(speed);
	SetLeft(speed);
	SetRight(speed);
}
void DriveTrain::SetLeft(float speed) {
	frontLeftMotor->Set(speed);
	centerLeftMotor->Set(speed);
	rearLeftMotor->Set(speed);
}
void DriveTrain::SetRight(float speed) {
	frontRightMotor->Set(-speed);
	centerRightMotor->Set(-speed);
	rearRightMotor->Set(-speed);
}
float DriveTrain::GetFeet() {
	return (leftEncoder->GetDistance() + rightEncoder->GetDistance()) / 2;
}
void DriveTrain::ResetEncoders() {
	leftEncoder->Reset();
	rightEncoder->Reset();
}
double DriveTrain::PIDGet() {
	return GetFeet();
}
void DriveTrain::PIDWrite(float value) {
	Set(value);
}
void DriveTrain::ResetJags() {
	frontLeftMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	centerLeftMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	rearLeftMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	frontRightMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	centerRightMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	rearRightMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	/*			
	 frontLeftMotor->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	 frontRightMotor->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	 frontLeftMotor->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
	 frontRightMotor->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
	 frontLeftMotor->ConfigEncoderCodesPerRev(250);
	 frontRightMotor->ConfigEncoderCodesPerRev(250);
	 elevatorMotor->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	 elevatorMotor2->ConfigNeutralMode(CANJaguar::kNeutralMode_Brake);
	 */
	frontLeftMotor->EnableControl();
	centerLeftMotor->EnableControl();
	rearLeftMotor->EnableControl();
	frontRightMotor->EnableControl();
	centerRightMotor->EnableControl();
	rearLeftMotor->EnableControl();
	printf("RESET JAGS \n");
}
float DriveTrain::Delinearize(float x) {
	int sign = 1;
	if (x < 0) {
		sign = -1;
	}
	float _sensitivity = Robot::netTable->GetNumber("DriveTrain::Sensitivity",3);
	return sign * (atan((2 * abs(x) - 1) * (_sensitivity)) / atan(_sensitivity) + 1) / 2;
}
