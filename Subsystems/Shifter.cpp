// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shifter.h"
#include "../Robotmap.h"
#include "../Commands/ShifterHighCmd.h"
#include "../Commands/ShifterLowCmd.h"
bool shifterIsHigh = true;
bool timing = false;
Shifter::Shifter() : Subsystem("Shifter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shifterLeft = RobotMap::shifterShifterLeft;
	shifterRight = RobotMap::shifterShifterRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shiftTimer = new Timer();
}
    
void Shifter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ShifterHighCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shifter::ShiftHigh()
{
	if (!shifterIsHigh)
	{
		if (!timing)
		{
			shiftTimer->Start();
			shiftTimer->Reset();
			timing = true;
		}
		shifterLeft->Set(DoubleSolenoid::kForward);
		shifterRight->Set(DoubleSolenoid::kForward);
		if (shiftTimer->HasPeriodPassed(2))
		{
			shifterIsHigh = true;
			timing=false;
			ShiftOff();
		}
	}	
}
void Shifter::ShiftLow()
{
	if (shifterIsHigh)
	{
		if (!timing)
		{		
			shiftTimer->Start();
			shiftTimer->Reset();
			timing=true;
		}
		shifterLeft->Set(DoubleSolenoid::kReverse);
		shifterRight->Set(DoubleSolenoid::kReverse);
		if (shiftTimer->HasPeriodPassed(2))
		{
				shifterIsHigh = false;
				timing=false;
				ShiftOff();
		}
	}
}
void Shifter::ShiftOff()
{
	shifterLeft->Set(DoubleSolenoid::kOff);
	shifterRight->Set(DoubleSolenoid::kOff);
}
